{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "capek",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "CMs9jJnQDtjn"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import linear_model\n",
        "import seaborn as sns\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset = pd.read_csv(\"capek.csv\")"
      ],
      "metadata": {
        "id": "orQPA4fTD0sR"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vJBjjhPoE_RA",
        "outputId": "6f8561d4-918b-4f03-81bf-64d135bbf583"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     provinsi  kota_kabupaten  tahun     bulan  jumlah  deklarasi_bulan  total\n",
              "0  Jawa Timur  Kota Mojokerto   2017   Januari     153                1    153\n",
              "1  Jawa Timur  Kota Mojokerto   2017  Februari     124                2    277\n",
              "2  Jawa Timur  Kota Mojokerto   2017     Maret     375                3    652\n",
              "3  Jawa Timur  Kota Mojokerto   2017     April     321                4    973\n",
              "4  Jawa Timur  Kota Mojokerto   2017       Mei     184                5   1157"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78340016-151f-4d01-8b98-71915ceda4c0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>provinsi</th>\n",
              "      <th>kota_kabupaten</th>\n",
              "      <th>tahun</th>\n",
              "      <th>bulan</th>\n",
              "      <th>jumlah</th>\n",
              "      <th>deklarasi_bulan</th>\n",
              "      <th>total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jawa Timur</td>\n",
              "      <td>Kota Mojokerto</td>\n",
              "      <td>2017</td>\n",
              "      <td>Januari</td>\n",
              "      <td>153</td>\n",
              "      <td>1</td>\n",
              "      <td>153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Jawa Timur</td>\n",
              "      <td>Kota Mojokerto</td>\n",
              "      <td>2017</td>\n",
              "      <td>Februari</td>\n",
              "      <td>124</td>\n",
              "      <td>2</td>\n",
              "      <td>277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Jawa Timur</td>\n",
              "      <td>Kota Mojokerto</td>\n",
              "      <td>2017</td>\n",
              "      <td>Maret</td>\n",
              "      <td>375</td>\n",
              "      <td>3</td>\n",
              "      <td>652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Jawa Timur</td>\n",
              "      <td>Kota Mojokerto</td>\n",
              "      <td>2017</td>\n",
              "      <td>April</td>\n",
              "      <td>321</td>\n",
              "      <td>4</td>\n",
              "      <td>973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Jawa Timur</td>\n",
              "      <td>Kota Mojokerto</td>\n",
              "      <td>2017</td>\n",
              "      <td>Mei</td>\n",
              "      <td>184</td>\n",
              "      <td>5</td>\n",
              "      <td>1157</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78340016-151f-4d01-8b98-71915ceda4c0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-78340016-151f-4d01-8b98-71915ceda4c0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-78340016-151f-4d01-8b98-71915ceda4c0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pydoc import help\n",
        "from scipy.stats.stats import pearsonr\n",
        "help(pearsonr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pc8PUo-iFJ5u",
        "outputId": "ae1dc47d-984a-4f8c-cdc8-6dd04b4fe0ec"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function pearsonr in module scipy.stats.stats:\n",
            "\n",
            "pearsonr(x, y)\n",
            "    Pearson correlation coefficient and p-value for testing non-correlation.\n",
            "    \n",
            "    The Pearson correlation coefficient [1]_ measures the linear relationship\n",
            "    between two datasets.  The calculation of the p-value relies on the\n",
            "    assumption that each dataset is normally distributed.  (See Kowalski [3]_\n",
            "    for a discussion of the effects of non-normality of the input on the\n",
            "    distribution of the correlation coefficient.)  Like other correlation\n",
            "    coefficients, this one varies between -1 and +1 with 0 implying no\n",
            "    correlation. Correlations of -1 or +1 imply an exact linear relationship.\n",
            "    Positive correlations imply that as x increases, so does y. Negative\n",
            "    correlations imply that as x increases, y decreases.\n",
            "    \n",
            "    The p-value roughly indicates the probability of an uncorrelated system\n",
            "    producing datasets that have a Pearson correlation at least as extreme\n",
            "    as the one computed from these datasets.\n",
            "    \n",
            "    Parameters\n",
            "    ----------\n",
            "    x : (N,) array_like\n",
            "        Input array.\n",
            "    y : (N,) array_like\n",
            "        Input array.\n",
            "    \n",
            "    Returns\n",
            "    -------\n",
            "    r : float\n",
            "        Pearson's correlation coefficient.\n",
            "    p-value : float\n",
            "        Two-tailed p-value.\n",
            "    \n",
            "    Warns\n",
            "    -----\n",
            "    PearsonRConstantInputWarning\n",
            "        Raised if an input is a constant array.  The correlation coefficient\n",
            "        is not defined in this case, so ``np.nan`` is returned.\n",
            "    \n",
            "    PearsonRNearConstantInputWarning\n",
            "        Raised if an input is \"nearly\" constant.  The array ``x`` is considered\n",
            "        nearly constant if ``norm(x - mean(x)) < 1e-13 * abs(mean(x))``.\n",
            "        Numerical errors in the calculation ``x - mean(x)`` in this case might\n",
            "        result in an inaccurate calculation of r.\n",
            "    \n",
            "    See Also\n",
            "    --------\n",
            "    spearmanr : Spearman rank-order correlation coefficient.\n",
            "    kendalltau : Kendall's tau, a correlation measure for ordinal data.\n",
            "    \n",
            "    Notes\n",
            "    -----\n",
            "    The correlation coefficient is calculated as follows:\n",
            "    \n",
            "    .. math::\n",
            "    \n",
            "        r = \\frac{\\sum (x - m_x) (y - m_y)}\n",
            "                 {\\sqrt{\\sum (x - m_x)^2 \\sum (y - m_y)^2}}\n",
            "    \n",
            "    where :math:`m_x` is the mean of the vector :math:`x` and :math:`m_y` is\n",
            "    the mean of the vector :math:`y`.\n",
            "    \n",
            "    Under the assumption that x and y are drawn from independent normal\n",
            "    distributions (so the population correlation coefficient is 0), the\n",
            "    probability density function of the sample correlation coefficient r\n",
            "    is ([1]_, [2]_)::\n",
            "    \n",
            "               (1 - r**2)**(n/2 - 2)\n",
            "        f(r) = ---------------------\n",
            "                  B(1/2, n/2 - 1)\n",
            "    \n",
            "    where n is the number of samples, and B is the beta function.  This\n",
            "    is sometimes referred to as the exact distribution of r.  This is\n",
            "    the distribution that is used in `pearsonr` to compute the p-value.\n",
            "    The distribution is a beta distribution on the interval [-1, 1],\n",
            "    with equal shape parameters a = b = n/2 - 1.  In terms of SciPy's\n",
            "    implementation of the beta distribution, the distribution of r is::\n",
            "    \n",
            "        dist = scipy.stats.beta(n/2 - 1, n/2 - 1, loc=-1, scale=2)\n",
            "    \n",
            "    The p-value returned by `pearsonr` is a two-sided p-value.  For a\n",
            "    given sample with correlation coefficient r, the p-value is\n",
            "    the probability that abs(r') of a random sample x' and y' drawn from\n",
            "    the population with zero correlation would be greater than or equal\n",
            "    to abs(r).  In terms of the object ``dist`` shown above, the p-value\n",
            "    for a given r and length n can be computed as::\n",
            "    \n",
            "        p = 2*dist.cdf(-abs(r))\n",
            "    \n",
            "    When n is 2, the above continuous distribution is not well-defined.\n",
            "    One can interpret the limit of the beta distribution as the shape\n",
            "    parameters a and b approach a = b = 0 as a discrete distribution with\n",
            "    equal probability masses at r = 1 and r = -1.  More directly, one\n",
            "    can observe that, given the data x = [x1, x2] and y = [y1, y2], and\n",
            "    assuming x1 != x2 and y1 != y2, the only possible values for r are 1\n",
            "    and -1.  Because abs(r') for any sample x' and y' with length 2 will\n",
            "    be 1, the two-sided p-value for a sample of length 2 is always 1.\n",
            "    \n",
            "    References\n",
            "    ----------\n",
            "    .. [1] \"Pearson correlation coefficient\", Wikipedia,\n",
            "           https://en.wikipedia.org/wiki/Pearson_correlation_coefficient\n",
            "    .. [2] Student, \"Probable error of a correlation coefficient\",\n",
            "           Biometrika, Volume 6, Issue 2-3, 1 September 1908, pp. 302-310.\n",
            "    .. [3] C. J. Kowalski, \"On the Effects of Non-Normality on the Distribution\n",
            "           of the Sample Product-Moment Correlation Coefficient\"\n",
            "           Journal of the Royal Statistical Society. Series C (Applied\n",
            "           Statistics), Vol. 21, No. 1 (1972), pp. 1-12.\n",
            "    \n",
            "    Examples\n",
            "    --------\n",
            "    >>> from scipy import stats\n",
            "    >>> a = np.array([0, 0, 0, 1, 1, 1, 1])\n",
            "    >>> b = np.arange(7)\n",
            "    >>> stats.pearsonr(a, b)\n",
            "    (0.8660254037844386, 0.011724811003954649)\n",
            "    \n",
            "    >>> stats.pearsonr([1, 2, 3, 4, 5], [10, 9, 2.5, 6, 4])\n",
            "    (-0.7426106572325057, 0.1505558088534455)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.corr(method='pearson')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "F5t5h3RKFYEr",
        "outputId": "9c938dd6-ba63-4feb-b1ae-9857fc498882"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    tahun    jumlah  deklarasi_bulan     total\n",
              "tahun            1.000000  0.325388         0.979932  0.961970\n",
              "jumlah           0.325388  1.000000         0.289790  0.276423\n",
              "deklarasi_bulan  0.979932  0.289790         1.000000  0.970500\n",
              "total            0.961970  0.276423         0.970500  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9568037-71e2-42b0-9b29-d3a0dc14e2e7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tahun</th>\n",
              "      <th>jumlah</th>\n",
              "      <th>deklarasi_bulan</th>\n",
              "      <th>total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>tahun</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.325388</td>\n",
              "      <td>0.979932</td>\n",
              "      <td>0.961970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>jumlah</th>\n",
              "      <td>0.325388</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.289790</td>\n",
              "      <td>0.276423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>deklarasi_bulan</th>\n",
              "      <td>0.979932</td>\n",
              "      <td>0.289790</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.970500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total</th>\n",
              "      <td>0.961970</td>\n",
              "      <td>0.276423</td>\n",
              "      <td>0.970500</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9568037-71e2-42b0-9b29-d3a0dc14e2e7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f9568037-71e2-42b0-9b29-d3a0dc14e2e7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f9568037-71e2-42b0-9b29-d3a0dc14e2e7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn.model_selection as ms\n",
        "bulan=dataset[['deklarasi_bulan']]\n",
        "jumlah=dataset[['total']]\n",
        "X_train, X_test, y_train, y_test=ms.train_test_split(bulan, jumlah, test_size=0.3, random_state=0)"
      ],
      "metadata": {
        "id": "S3GU6iUIFdO_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn.linear_model as lm\n",
        "modell = lm.LinearRegression()\n",
        "modell.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_CGLPp9FsAf",
        "outputId": "5dbc03a1-262b-4786-ab55-15cd58ca6202"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "modell.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_kgM9IamFvMs",
        "outputId": "6ab97b44-6527-40b6-be8d-431ec6296acc"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[698.75308402]])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "modell.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X_nG2hjZFzxY",
        "outputId": "d49aced3-f869-4b37-cd2e-0f993b67d4af"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-6459.80827489])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test=ms.train_test_split(bulan, jumlah, test_size=0.3, random_state=0)\n",
        "plt.scatter(X_train, y_train, edgecolors='r')\n",
        "plt.xlabel('bulan')\n",
        "plt.ylabel('jumlah')\n",
        "plt.title('pendataan')\n",
        "x1 = np.linspace (0,42)\n",
        "y1 = -6459.80827489 + 698.75308402 * x1\n",
        "plt.plot(x1,y1)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "z4hb-B7iF1EQ",
        "outputId": "0097c16d-7815-4882-978c-5b4085086103"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2 =  modell.score(X_test, y_test)\n",
        "print(r2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tZdgHJERGJUk",
        "outputId": "efdc8dba-755c-4d70-c617-c02cf4ae758e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9367178827409657\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "jumlah=modell.predict([[61]])\n",
        "print(jumlah)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B1Zbe0z6GK2f",
        "outputId": "ebc04c44-1d68-4e47-f45f-91de0fc169a2"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[36164.12985032]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prediksi = modell.predict(X_test)\n",
        "print(prediksi)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vXu3Vkk_Go1b",
        "outputId": "62065432-da01-472f-8aed-ac9662c7067f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[12406.52499365]\n",
            " [18695.30274982]\n",
            " [35465.3767663 ]\n",
            " [13804.03116168]\n",
            " [ 1925.22873335]\n",
            " [-4363.54902283]\n",
            " [17996.5496658 ]\n",
            " [34766.62368228]\n",
            " [22189.06816992]\n",
            " [ 9611.51265757]\n",
            " [-2966.04285479]\n",
            " [ 1226.47564933]\n",
            " [15201.53732972]\n",
            " [22887.82125394]\n",
            " [17297.79658178]\n",
            " [24285.32742198]\n",
            " [28477.8459261 ]\n",
            " [ -869.78360273]]\n"
          ]
        }
      ]
    }
  ]
}